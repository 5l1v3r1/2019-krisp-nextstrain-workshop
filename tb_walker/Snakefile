# this first rule is the default rule -- it produces the final output
# by simply typing 'snakemake' on the commandline
rule all:
    input:
        auspice_tree = "auspice/tbWalkerSub_tree.json",
        auspice_meta = "auspice/tbWalkerSub_meta.json"
    output:
        combined_json = "../auspice/tb_walker.json"
    run:
        import json
        with open(input.auspice_meta) as fh_meta, open(input.auspice_tree) as fh_tree:
            out_json = {'meta':json.load(fh_meta), 'tree':json.load(fh_tree)}

        with open(output.combined_json, 'wt') as fh:
            json.dump(out_json, fh)



# Specify names of data and configuration files that the remaining rules use
config.update({
    # data files
    "seq": "data/Walker2018_plus_background.vcf.gz",
    "meta": "data/meta.tsv",
    "ref": "data/ref.fasta",
    # config files
    "mask": "config/Locus_to_exclude_Mtb.bed",
    "drms": "config/DRMs-AAnuc.tsv",
    "sites": "config/drm_sites.txt",
    "generef": "config/Mtb_H37Rv_NCBI_Annot.gff",
    "genes": "config/genes.txt",
    "colors": "config/color.tsv",
    "config": "config/config.json",
    "geo_info": "config/lat_longs.tsv"
})
#end of config definitions

rule mask:
    message:
        "remove a subset of variable positions specified in {input.mask} because they are unsuitable for tree building"
    input:
        seq = config["seq"],
        mask = config["mask"]
    output:
       "results/masked.vcf.gz"
    shell:
        "augur mask --sequences {input.seq} --output {output} --mask {input.mask}"


rule tree:
    message:
        "Construct a tree from {input.aln} to generate {output}"
    input:
        aln = rules.mask.output,
        ref = config["ref"],
        sites = config["sites"]
    output:
        "results/tree_raw.nwk"
    params:
        method = 'iqtree'
    shell:
        'augur tree --exclude-sites {input.sites} --alignment {input.aln} --vcf-reference {input.ref} --output {output} --method {params.method}'


rule refine:
    message:
        "Use {input.tree} to generate the timetree {output.tree} with a "
        "fixed molecular clock rate of {params.rate}"
    input:
        tree = rules.tree.output,
        aln = rules.mask.output,
        metadata = config["meta"], # 'data/meta-noUnpub-Mod2.tsv', # metadata = meta,
        ref = config["ref"]
    output:
        tree = "results/tree.nwk",
        node_data = "results/branch_lengths.json",
    params:
        root = 'min_dev',
        rate = 1.5E-7,
        coal = 'opt',
        yearLim = '2017 1990'
    shell:
        """
        augur refine --tree {input.tree} --alignment {input.aln} --metadata {input.metadata} \
            --output-tree {output.tree} --output-node-data {output.node_data} --vcf-reference {input.ref} \
            --timetree --root {params.root} --clock-rate {params.rate} --coalescent {params.coal} \
            --year-bounds {params.yearLim}
        """

rule ancestral:
    message:
        "Infer ancestral sequence states and map mutations onto the tree. "
        "Results will be saved in {output.nt_data} and {output.vcf_out}"
    input:
        tree = rules.refine.output.tree,
        alignment = rules.mask.output,
        ref = config["ref"]
    output:
        nt_data = "results/nt_muts.json",
        vcf_out = "results/nt_muts.vcf"
    params:
        inference = "joint"
    shell:
        """
        augur ancestral --tree {input.tree} --alignment {input.alignment} \
            --output {output.nt_data} --inference {params.inference} \
            --output-vcf {output.vcf_out} --vcf-reference {input.ref}
        """

rule translate:
    message:
        "Check whether the nucleotide mutations mapped to the tree change "
        "annotated proteins and determine the amino acid changes caused. "
        "The output {output.aa_data} will contain the mapped mutations, "
        "{output.vcf_out} and {output.vcf_ref} all changes and the "
        "corresponding translations of the reference."
    input:
        tree = rules.refine.output.tree,
        ref = config["ref"],
        gene_ref = config["generef"],
        vcf = rules.ancestral.output.vcf_out,
        genes = config["genes"]
    output:
        aa_data = "results/aa_muts.json",
        vcf_out = "results/translations.vcf",
        vcf_ref = "results/translations_reference.fasta"
    shell:
        """
        augur translate --tree {input.tree} --genes {input.genes} --vcf-reference {input.ref} \
            --ancestral-sequences {input.vcf} --output {output.aa_data} --reference-sequence {input.gene_ref} \
            --alignment-output {output.vcf_out} --vcf-reference-output {output.vcf_ref}
        """

rule traits:
    input:
        tree = rules.refine.output.tree,
        meta = config["meta"]
    output:
        "results/traits.json"
    params:
        traits = 'country countrySamp outbreak sublineage'
    shell:
        'augur traits --tree {input.tree} --metadata {input.meta}'
        ' --columns {params.traits} --output {output}'

rule seqtraits:
    input:
        align = rules.ancestral.output.vcf_out,
        ref = config["ref"],
        trans_align = rules.translate.output.vcf_out,
        trans_ref = rules.translate.output.vcf_ref,
        drms = config["drms"]
    output:
        drm_data = "results/drms.json",
    params:
        count = "traits",
        label = "Drug_Resistance"
    shell:
        """
        augur sequence-traits \
            --ancestral-sequences {input.align} \
            --vcf-reference {input.ref} \
            --translations {input.trans_align} \
            --vcf-translate-reference {input.trans_ref} \
            --features {input.drms} \
            --output {output.drm_data} \
            --count {params.count} --label {params.label}
        """

rule export:
    input:
        tree = rules.refine.output.tree,
        metadata = config["meta"],
        branch_lengths = rules.refine.output.node_data,
        traits = rules.traits.output,
        nt_muts = rules.ancestral.output.nt_data,
        aa_muts = rules.translate.output.aa_data,
        drms = rules.seqtraits.output.drm_data,
        color_defs = config["colors"],
        config = config["config"],
        geo_info = config["geo_info"]
    output:
        tree = rules.all.input.auspice_tree,
        meta = rules.all.input.auspice_meta
    shell:
        'augur export --tree {input.tree} --metadata {input.metadata}'
            ' --node-data {input.branch_lengths} {input.traits} {input.drms} {input.aa_muts} {input.nt_muts}'
            ' --auspice-config {input.config} --colors {input.color_defs} --output-tree {output.tree}'
            ' --lat-longs {input.geo_info} --output-meta {output.meta}'

rule clean:
	shell:
		'''
		rm auspice/*json ||: &
		rm results/* ||:
		'''
