# this first rule is the default rule -- it produces the final output
# by simply typing 'snakemake' on the commandline
rule all:
    input:
        auspice_tree = "auspice/emma_tbWalker_tree.json",
        auspice_meta = "auspice/emma_tbWalker_meta.json"
    output:
        combined_json = "../auspice/tb_walker.json"
    run:
        import json
        with open(input.auspice_meta) as fh_meta, open(input.auspice_tree) as fh_tree:
            out_json = {'meta':json.load(fh_meta), 'tree':json.load(fh_tree)}

        with open(output.combined_json, 'wt') as fh:
            json.dump(out_json, fh)



# Specify names of data and configuration files that the remaining rules use

# data files
starting_seq = "data/Walker2018_plus_background.vcf.gz",
metadata = "data/meta.tsv",
mapping_reference = "data/ref.fasta",

# sequence-related config files
sites_to_mask = "config/Locus_to_exclude_Mtb.bed",
drms_to_find = "config/DRMs-AAnuc.tsv",
sites_to_ignore = "config/drm_sites.txt",
gene_reference = "config/Mtb_H37Rv_NCBI_Annot.gff",     #file that contains start/end locations for all genes in TB
genes_to_use = "config/genes.txt",                      #to speed analysis, only use DR-associated genes

# display-related config files
color_file = "config/color.tsv",
config_file = "config/config.json",
geo_file = "config/lat_longs.tsv"
#end of config definitions

#Start of rules for analysis

rule mask:
    message:
        "remove a subset of variable positions specified in {input.mask} because they are unsuitable for tree building"
    input:
        seq = starting_seq,
        mask = sites_to_mask
    output:
       "results/masked.vcf.gz"
    shell:
        "augur mask --sequences {input.seq} --output {output} --mask {input.mask}"


rule tree:
    message:
        "Construct a tree from {input.aln} to generate {output}. "
        "Sites in {input.sites} will be ignored during this step"
    input:
        aln = rules.mask.output,
        ref = mapping_reference,
        sites = sites_to_ignore
    output:
        "results/tree_raw.nwk"
    params:
        method = 'iqtree'
    shell:
        'augur tree --exclude-sites {input.sites} --alignment {input.aln} --vcf-reference {input.ref} --output {output} --method {params.method}'


rule refine:
    message:
        "Use {input.tree} to generate the timetree {output.tree} with a "
        "fixed molecular clock rate of {params.rate} subs/site/yr"
    input:
        tree = rules.tree.output,
        aln = rules.mask.output,
        meta = metadata,
        ref = mapping_reference
    output:
        tree = "results/tree.nwk",
        node_data = "results/branch_lengths.json",
    params:
        root = 'min_dev',
        rate = 1.5E-7,
        coal = 'opt',
        yearLim = '2017 1990'
    shell:
        """
        augur refine --tree {input.tree} --alignment {input.aln} --metadata {input.meta} \
            --output-tree {output.tree} --output-node-data {output.node_data} --vcf-reference {input.ref} \
            --timetree --root {params.root} --clock-rate {params.rate} --coalescent {params.coal} \
            --year-bounds {params.yearLim}
        """

rule ancestral:
    message:
        "Infer ancestral sequence states and map mutations onto the tree. "
        "Results will be saved in {output.nt_data} and {output.vcf_out}"
    input:
        tree = rules.refine.output.tree,
        alignment = rules.mask.output,
        ref = mapping_reference
    output:
        nt_data = "results/nt_muts.json",
        vcf_out = "results/nt_muts.vcf"
    params:
        inference = "joint"
    shell:
        """
        augur ancestral --tree {input.tree} --alignment {input.alignment} \
            --output {output.nt_data} --inference {params.inference} \
            --output-vcf {output.vcf_out} --vcf-reference {input.ref}
        """

rule translate:
    message:
        "Check whether the nucleotide mutations mapped to the tree change "
        "annotated proteins and determine the amino acid changes caused. "
        "The output {output.aa_data} will contain the mapped mutations, "
        "{output.vcf_out} and {output.vcf_ref} all changes and the "
        "corresponding translations of the reference."
    input:
        tree = rules.refine.output.tree,
        ref = mapping_reference,
        gene_ref = gene_reference,
        vcf = rules.ancestral.output.vcf_out,
        genes = genes_to_use
    output:
        aa_data = "results/aa_muts.json",
        vcf_out = "results/translations.vcf",
        vcf_ref = "results/translations_reference.fasta"
    shell:
        """
        augur translate --tree {input.tree} --genes {input.genes} --vcf-reference {input.ref} \
            --ancestral-sequences {input.vcf} --output {output.aa_data} --reference-sequence {input.gene_ref} \
            --alignment-output {output.vcf_out} --vcf-reference-output {output.vcf_ref}
        """

rule traits:
    message:
        "Reconstruct the ancestral state of the traits '{params.traits}' on the tree. "
        "The state for each node and internal node is saved in {output}."
    input:
        tree = rules.refine.output.tree,
        meta = metadata
    output:
        "results/traits.json"
    params:
        traits = 'country countrySamp'
    shell:
        'augur traits --tree {input.tree} --metadata {input.meta}'
        ' --columns {params.traits} --output {output}'

rule seqtraits:
    message:
        "Inspect observed and ancestral sequences to detect the presence of mutations associated "
        "with certain traits - here, drug resistance. Mutations outside genes are identified from "
        "reconstructed nucleotide sequences in {input.align}; mutations inside genes are identified by "
        "amino-acid changes in translated reconstructed sequences in {input.trans_align}. "
        "The mutations to look for are read from {input.drms}, and the presence of these traits "
        "in each node is saved in {output}. "
    input:
        align = rules.ancestral.output.vcf_out,
        ref = mapping_reference,
        trans_align = rules.translate.output.vcf_out,
        trans_ref = rules.translate.output.vcf_ref,
        drms = drms_to_find
    output:
        drm_data = "results/drms.json",
    params:
        count = "traits",
        label = "Drug_Resistance"
    shell:
        """
        augur sequence-traits \
            --ancestral-sequences {input.align} \
            --vcf-reference {input.ref} \
            --translations {input.trans_align} \
            --vcf-translate-reference {input.trans_ref} \
            --features {input.drms} \
            --output {output.drm_data} \
            --count {params.count} --label {params.label}
        """

rule export:
    message:
        "Gathers up all of the files generated during analysis and combines them "
        "into the format needed to display the information graphically."
    input:
        tree = rules.refine.output.tree,
        meta = metadata,
        branch_lengths = rules.refine.output.node_data,
        traits = rules.traits.output,
        nt_muts = rules.ancestral.output.nt_data,
        aa_muts = rules.translate.output.aa_data,
        drms = rules.seqtraits.output.drm_data,
        color_defs = color_file,
        config = config_file,
        geo_info = geo_file
    output:
        tree = rules.all.input.auspice_tree,
        meta = rules.all.input.auspice_meta
    shell:
        'augur export --tree {input.tree} --metadata {input.meta}'
            ' --node-data {input.branch_lengths} {input.traits} {input.drms} {input.aa_muts} {input.nt_muts}'
            ' --auspice-config {input.config} --colors {input.color_defs} --output-tree {output.tree}'
            ' --lat-longs {input.geo_info} --output-meta {output.meta}'

rule clean:
	shell:
		'''
		rm auspice/*json ||: &
		rm results/* ||:
		'''
