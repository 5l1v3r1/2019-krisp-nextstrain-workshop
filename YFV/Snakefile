# set the name of your build to differentiate it from everybody else's
build_name = 'EXAMPLE'

# this is the standard rule that will be executed when snakemake is invoked without arguments.
# It specifies the files for visualization with your build_name inserted
rule all:
    input:
        auspice_tree = "auspice/YFV_{name}_tree.json".format(name=build_name),
        auspice_meta = "auspice/YFV_{name}_meta.json".format(name=build_name),


# name and specify input data and configuration
input_sequences = ["data/2016_outbreak.fasta", "data/context_sequences.fasta"],
input_metadata = ["data/2016_outbreak.tsv", "data/context_metadata.tsv"],

dropped_strains = "config/dropped_strains.txt",
reference = "config/YFV_reference.gb",
colors = "config/colors.tsv",
auspice_config = "config/auspice_config.json",
lat_longs = "config/lat_longs.tsv"


rule concatenate:
    message:
        "concatenate the data to be analyzed with publicly available sequences from genbank"
        " to provide phylgenetic context for the analysis. Note that the two metadata files"
        " need to have the exact same columns for this to work."
    input:
        seq = input_sequences,
        meta = input_metadata
    output:
        seq =  "results/sequences.fasta",
        meta = "results/metadata.tsv"
    shell:
        '''
        cat {input.seq} > {output.seq} &
        cat {input.meta} > {output.meta}
        '''

rule filter:
    message: "Remove strains that are specified in 'dropped_strains' and filter by date."
    input:
        sequences = rules.concatenate.output.seq,
        metadata = rules.concatenate.output.meta,
        exclude = dropped_strains
    output:
        sequences = "results/filtered.fasta"
    params:
        min_date = 1950
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} \
            --output {output.sequences} \
            --min-date {params.min_date}
        """


rule align:
    message: "Aligning sequences"
    input:
        sequences = rules.filter.output.sequences,
        reference = reference
    output:
        alignment = "results/aligned.fasta"
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --fill-gaps
        """


rule tree:
    message: "Building tree"
    input:
        alignment = rules.align.output.alignment
    output:
        tree = "results/tree_raw.nwk"
    params:
        method = "iqtree"
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --method {params.method}
        """

rule refine:
    message: "Transform the tree into a time scaled phylogeny using a fixed "
             "rate {params.clock_rate}."
    input:
        tree = rules.tree.output.tree,
        alignment = rules.align.output,
        metadata = rules.concatenate.output.meta
    output:
        tree = "results/tree.nwk",
        node_data = "results/branch_lengths.json"
    params:
        clock_filter_iqd = 3,
        root='min_dev',
        clock_rate=8.3e-4
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --clock-filter-iqd {params.clock_filter_iqd} \
            --timetree \
            --root {params.root} \
            --clock-rate {params.clock_rate}
        """

rule ancestral:
    message: "Reconstructing ancestral sequences and map mutations to the tree."
    input:
        tree = rules.refine.output.tree,
        alignment = rules.align.output
    output:
        node_data = "results/nt_muts.json"
    params:
        inference = "joint"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output {output.node_data} \
            --inference {params.inference}
        """

rule translate:
    message: "Translating nucleotide sequences into amino acid sequences and"
             " map amino acid changes to the tree."
    input:
        tree = rules.refine.output.tree,
        node_data = rules.ancestral.output.node_data,
        reference = reference
    output:
        node_data = "results/aa_muts.json"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output {output.node_data} \
        """



rule traits:
    message: "Inferring ancestral traits"
    input:
        tree = rules.refine.output.tree,
        metadata = rules.concatenate.output.meta
    output:
        node_data = "results/traits.json",
    params:
        columns = "country state host",
        sampling_bias_correction = 3
    shell:
        """
        augur traits \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --output {output.node_data} \
            --columns {params.columns} \
            --sampling-bias-correction {params.sampling_bias_correction} \
            --confidence
        """

rule export:
    message: "Exporting data files for auspice visualization"
    input:
        tree = rules.refine.output.tree,
        metadata = rules.concatenate.output.meta,
        branch_lengths = rules.refine.output.node_data,
        traits = rules.traits.output.node_data,
        nt_muts = rules.ancestral.output.node_data,
        aa_muts = rules.translate.output.node_data,
        colors = colors,
        auspice_config = auspice_config,
        lat_longs = lat_longs
    output:
        auspice_tree = rules.all.input.auspice_tree,
        auspice_meta = rules.all.input.auspice_meta,
    shell:
        """
        augur export \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.traits} {input.nt_muts} {input.aa_muts} \
            --colors {input.colors} \
            --auspice-config {input.auspice_config} \
            --output-tree {output.auspice_tree} \
            --output-meta {output.auspice_meta} \
            --geography-traits country state \
            --lat-longs {input.lat_longs}
        """


rule clean:
    message:
        "remove all output files"
    shell:
        '''
        rm results/* ||: &
        rm auspice/* ||:
        '''
